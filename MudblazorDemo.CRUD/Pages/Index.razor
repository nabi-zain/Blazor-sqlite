@page "/"

@using MudblazorDemo.CRUD.Data
@inject MudblazorDemo.CRUD.Services.ICustomerService customerService
@inject MudblazorDemo.CRUD.Services.IEventService eventService
@inject MudBlazor.ISnackbar snackBar

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit User</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="customer.FirstName" Label="First Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="customer.LastName" Label="Last Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="customer.PhoneNumber" Label="Phone Number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudSelect T="string" Label="Select an event" @bind-Value="selectedItem">
            @foreach (var item in GetEvents())
            {
                <MudSelectItem Value="@item.Name">@item.Name - @item.SeatsAvailable</MudSelectItem>
            }
        </MudSelect>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save User</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetCustomers()" Filter="new Func<Customer, bool>(Search)" @bind-customer="customer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>No.</MudTh>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Phone Number</MudTh>
        <MudTh>Event</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.Name</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code{ private bool hover = false;
    private string searchString = "";

    private Customer customer = new Customer();
    private List<Customer> customers = new List<Customer>();

    private Event eventz = new Event();

    private string selectedItem;
    private List<Data.Event> events = new List<Data.Event>();

    protected override async Task OnInitializedAsync()
    {
        events = eventService.GetEvents();
        GetCustomers();
    }

    private List<Customer> GetCustomers()
    {
        customers = customerService.GetCustomers();

        return customers;
    }

    private List<Data.Event> GetEvents()
    {
        events = eventService.GetEvents();
        return events;
    }

    private bool Search(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (customer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void Save()
    {

        try
        {

            var checkifregistrationexist = customerService.IsRegExist(customer.PhoneNumber);

            if(checkifregistrationexist == true)
            {
                snackBar.Add("User already Registered.", Severity.Error);
            }
            else
            {
                var eve = eventService.GetEvents().Where(x => x.Name == selectedItem).FirstOrDefault();

                var e = eventService.GetEventById(eve.Id);
                e.SeatsAvailable += -1;

                eventService.UpdateEvent(e);

                customer.Name = selectedItem;
                customerService.SaveCustomer(customer);
                customer = new Customer();
                snackBar.Add("User Saved.", Severity.Success);
                GetCustomers();
            }

        }
        catch (Exception e)
        {

            throw;
        }



    }
    private void Edit(int id)
    {
        customer = customers.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        customerService.DeleteCustomer(id);
        snackBar.Add("User Deleted.", Severity.Success);
        GetCustomers();
    } }